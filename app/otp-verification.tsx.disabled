import { router } from 'expo-router';import { router } from 'expo-router';

import React, { useEffect } from 'react';import React, { useEffect } from 'react';

import { View } from 'react-native';import { View } from 'react-native';

import { showSuccessToast } from '../src/utils/toastConfig';import { showSuccessToast } from '../src/utils/toastConfig';



export default function OTPVerificationScreen() {export default function OTPVerificationScreen() {

  // COMPLETELY DISABLE - IMMEDIATE REDIRECT  // COMPLETELY DISABLE - IMMEDIATE REDIRECT

  useEffect(() => {  useEffect(() => {

    console.log('=== OTP VERIFICATION DISABLED - REDIRECTING TO LOGIN ===');    console.log('=== OTP VERIFICATION DISABLED - REDIRECTING TO LOGIN ===');

    showSuccessToast('Success', 'Registration successful! Please log in.');    showSuccessToast('Success', 'Registration successful! Please log in.');

    router.replace('/login');    router.replace('/login');

  }, []);  }, []);



  return <View style={{ flex: 1, backgroundColor: '#2da898ff' }} />;  return <View style={{ flex: 1, backgroundColor: '#2da898ff' }} />;

}}
    const otpCode = otp.join('');
    if (otpCode.length === 6 && !isLoading && !hasAutoVerified) {
      setHasAutoVerified(true);
      // Auto verify after a short delay to ensure user sees the complete OTP
      setTimeout(() => {
        handleVerify();
      }, 500);
    } else if (otpCode.length < 6) {
      // Reset auto-verify flag when user clears OTP
      setHasAutoVerified(false);
    }
  }, [otp, isLoading, hasAutoVerified]);

  // Handle OTP input change
  const handleOtpChange = (text: string, index: number) => {
    // Remove non-numeric characters
    const numericText = text.replace(/[^0-9]/g, '');
    
    // Handle paste operation (multiple digits)
    if (numericText.length > 1) {
      const digits = numericText.slice(0, 6);
      const newOtp = [...otp];
      
      // Fill from current index
      for (let i = 0; i < digits.length && (index + i) < 6; i++) {
        newOtp[index + i] = digits[i];
      }
      
      setOtp(newOtp);
      
      // Focus the appropriate input
      const lastFilledIndex = Math.min(index + digits.length - 1, 5);
      setTimeout(() => {
        inputRefs.current[lastFilledIndex]?.focus();
      }, 50);
      
      return;
    }
    
    // Single digit input
    const newOtp = [...otp];
    newOtp[index] = numericText;
    setOtp(newOtp);

    // Auto focus next input if value is entered
    if (numericText && index < 5) {
      setTimeout(() => {
        inputRefs.current[index + 1]?.focus();
      }, 50);
    }
  };

  // Handle backspace to move to previous input
  const handleKeyPress = (key: string, index: number) => {
    if (key === 'Backspace' && !otp[index] && index > 0) {
      // Clear previous input and move focus
      const newOtp = [...otp];
      newOtp[index - 1] = '';
      setOtp(newOtp);
      
      setTimeout(() => {
        inputRefs.current[index - 1]?.focus();
      }, 50);
    }
  };

  const handleVerify = async () => {
    const otpCode = otp.join('');
    if (otpCode.length !== 6) {
      showErrorToast('Error', 'Please enter the complete 6-digit OTP');
      return;
    }

    if (!email) {
      showErrorToast('Error', 'Email not found. Please start the process again.');
      router.push('/forgot-password');
      return;
    }

    // Prevent multiple verification attempts
    if (isLoading) {
      return;
    }

    setIsLoading(true);
    try {
      const response = await authService.verifyPasswordResetOTP({
        email: email as string,
        otp: otpCode,
        type: 'password_reset'
      });
      
      showSuccessToast('Success', 'OTP verified successfully!');
      // Navigate to reset password screen with the reset token
      router.push({
        pathname: '/reset-password',
        params: { 
          email, 
          resetToken: response.data?.resetToken || ''
        }
      });
    } catch (error) {
      const apiError = error as ApiError;
      showErrorToast('Verification Failed', apiError.message || 'Failed to verify OTP');
      // Reset auto-verify flag on error to allow retry
      setHasAutoVerified(false);
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendCode = async () => {
    if (!email) {
      showErrorToast('Error', 'Email not found. Please start the process again.');
      router.push('/forgot-password');
      return;
    }

    setResendLoading(true);
    try {
      const response = await authService.requestPasswordReset({ email: email as string });
      
      showSuccessToast('Success', 'New OTP sent to your email!');
      // Clear current OTP and reset auto-verify flag
      setOtp(['', '', '', '', '', '']);
      setHasAutoVerified(false);
    } catch (error) {
      const apiError = error as ApiError;
      showErrorToast('Failed to Resend', apiError.message || 'Failed to resend OTP');
    } finally {
      setResendLoading(false);
    }
  };

  const handleChangeEmail = () => {
    // Navigate back to enter email/phone
    router.back();
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#2da898ff" />
      
      <LinearGradient
        colors={['#2da898ff', '#abeee6ff']}
        start={{ x: 0, y: 0 }}
        end={{ x: 0, y: 1 }}
        style={StyleSheet.absoluteFillObject}
      >
        <ScrollView 
          style={styles.scrollView} 
          contentContainerStyle={styles.scrollViewContent}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        >
          {/* Header with close button */}
          <View style={styles.headerContainer}>
            <Pressable style={styles.backButton} onPress={() => router.back()}>
              <Text style={styles.backArrow}>‚Üê</Text>
            </Pressable>
          </View>

          {/* Main Content Container */}
          <View style={styles.mainContent}>
            {/* Header Section */}
            <View style={styles.headerSection}>
              <Text style={styles.title}>Verify Your Account</Text>
              <Text style={styles.subtitle}>
                We've sent a 6-digit code to your email.{'\n'}Please enter it below to continue.
              </Text>
            </View>

          {/* OTP Form Section */}
          <View style={styles.formContainer}>
            {/* OTP Input Container */}
            <View style={styles.otpContainer}>
              {otp.map((digit, index) => (
                <TextInput
                  key={index}
                  ref={(ref) => (inputRefs.current[index] = ref)}
                  style={[
                    styles.otpInput,
                    digit ? styles.otpInputFilled : null
                  ]}
                  value={digit}
                  onChangeText={(text) => handleOtpChange(text, index)}
                  onKeyPress={({ nativeEvent }) => handleKeyPress(nativeEvent.key, index)}
                  keyboardType="numeric"
                  maxLength={1}
                  textAlign="center"
                  selectTextOnFocus
                  autoFocus={index === 0}
                  placeholder=""
                />
              ))}
            </View>

            {/* Resend Section */}
            <View style={styles.resendContainer}>
              <Text style={styles.resendText}>Didn't receive the code? </Text>
              <Pressable onPress={handleResendCode} disabled={resendLoading}>
                <Text style={styles.resendLink}>
                  {resendLoading ? 'Sending...' : 'Resend'}
                </Text>
              </Pressable>
            </View>

            {/* Verify Button */}
            <Pressable 
              style={[styles.verifyButton, isLoading && styles.verifyButtonDisabled]} 
              onPress={handleVerify}
              disabled={isLoading}
            >
              <Text style={styles.verifyButtonText}>
                {isLoading ? 'Verifying...' : 'Verify'}
              </Text>
            </Pressable>
          </View>
          </View>
        </ScrollView>
      </LinearGradient>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundGradient: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollViewContent: {
    flexGrow: 1,
    paddingHorizontal: getResponsivePadding(screenData.isSmall ? 20 : screenData.isMedium ? 24 : 32),
    paddingTop: getResponsiveHeight(50),
    paddingBottom: getResponsiveHeight(40),
    justifyContent: 'center',
    minHeight: screenData.height - getResponsiveHeight(80),
  },
  headerContainer: {
    position: 'absolute',
    top: getResponsiveHeight(screenData.isSmall ? 50 : 60),
    left: getResponsivePadding(screenData.isSmall ? 20 : screenData.isMedium ? 24 : 32),
    zIndex: 10,
  },
  mainContent: {
    alignItems: 'center',
    marginTop: getResponsiveMargin(0),
  },
  backButton: {
    width: getResponsiveWidth(40),
    height: getResponsiveHeight(40),
    borderRadius: getResponsiveBorderRadius(20),
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  backArrow: {
    fontSize: getResponsiveFontSize(20),
    color: colors.white,
    fontWeight: 'bold',
  },
  headerSection: {
    alignItems: 'center',
    marginBottom: getResponsiveMargin(screenData.isSmall ? 25 : 35),
    paddingHorizontal: getResponsivePadding(20),
  },
  title: {
    fontSize: getResponsiveFontSize(screenData.isSmall ? 28 : screenData.isMedium ? 32 : 36),
    fontWeight: 'bold',
    color: colors.white,
    marginBottom: getResponsiveMargin(16),
    textAlign: 'center',
    letterSpacing: 0.5,
    flexWrap: 'nowrap',
  },
  subtitle: {
    fontSize: getResponsiveFontSize(screenData.isSmall ? 16 : screenData.isMedium ? 17 : 18),
    color: colors.white,
    textAlign: 'center',
    lineHeight: getResponsiveFontSize(screenData.isSmall ? 24 : screenData.isMedium ? 26 : 28),
    fontWeight: '400',
    paddingHorizontal: getResponsivePadding(screenData.isSmall ? 10 : 0),
    opacity: 0.95,
  },
  formContainer: {
    alignItems: 'center',
    maxWidth: getResponsiveWidth(400),
    alignSelf: 'center',
    width: '100%',
  },
  otpContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: getResponsiveMargin(25),
    paddingHorizontal: getResponsivePadding(10),
    width: '100%',
  },
  otpInput: {
    width: getResponsiveWidth(screenData.isSmall ? 45 : 50),
    height: getResponsiveHeight(screenData.isSmall ? 55 : 60),
    borderWidth: 2,
    borderColor: '#F59E0B',
    borderRadius: getResponsiveBorderRadius(12),
    fontSize: fontSizes.xl,
    fontWeight: '600',
    color: '#333333',
    backgroundColor: colors.white,
    textAlign: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 5,
    marginHorizontal: getResponsiveWidth(2),
  },
  otpInputFilled: {
    borderColor: '#2da898ff',
    borderWidth: 2,
  },
  resendContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: getResponsiveMargin(20),
    flexWrap: 'wrap',
    width: '100%',
  },
  resendText: {
    fontSize: fontSizes.md,
    color: '#575623ff',
  },
  resendLink: {
    fontSize: fontSizes.md,
    color: '#575623ff',
    fontWeight: '600',
    textDecorationLine: 'none',
  },
  verifyButton: {
    backgroundColor: '#2da898ff',
    borderRadius: getResponsiveBorderRadius(25),
    paddingVertical: getResponsivePadding(screenData.isSmall ? 16 : 18),
    paddingHorizontal: getResponsivePadding(20),
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: getResponsiveMargin(25),
    marginBottom: getResponsiveMargin(20),
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 4,
    minHeight: getResponsiveHeight(screenData.isSmall ? 50 : 56),
    width: '100%',
    alignSelf: 'center',
  },
  verifyButtonDisabled: {
    backgroundColor: '#9CA3AF',
  },
  verifyButtonText: {
    color: colors.white,
    fontSize: fontSizes.lg,
    fontWeight: 'bold',
  },
});